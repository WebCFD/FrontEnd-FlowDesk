const drawMeasurement = (ctx: CanvasRenderingContext2D) => {
      if (measureStart && measureEnd) {
        const startPoint = measureStart;
        const endPoint = measureEnd;

        // Calculate distance in pixels and cm
        const dx = endPoint.x - startPoint.x;
        const dy = endPoint.y - startPoint.y;
        const distanceInPixels = Math.sqrt(dx * dx + dy * dy);
        const distanceInCm = Math.round(pixelsToCm(distanceInPixels));

        // Draw arrow line
        ctx.save();
        ctx.strokeStyle = "rgba(75, 85, 99, 0.8)"; // Slightly darker gray with less transparency
        ctx.lineWidth = 2 / zoom;
        // Remove the setLineDash to make the line continuous
        
        // Draw main line
        ctx.beginPath();
        ctx.moveTo(startPoint.x, startPoint.y);
        ctx.lineTo(endPoint.x, endPoint.y);
        ctx.stroke();

        // Calculate arrow head points
        const angle = Math.atan2(dy, dx);
        const arrowLength = 15 / zoom;
        const arrowAngle = Math.PI / 6; // 30 degrees

        // Draw start arrow head (outward)
        ctx.beginPath();
        ctx.moveTo(startPoint.x, startPoint.y);
        ctx.lineTo(
          startPoint.x - arrowLength * Math.cos(angle - arrowAngle),
          startPoint.y - arrowLength * Math.sin(angle - arrowAngle),
        );
        ctx.moveTo(startPoint.x, startPoint.y);
        ctx.lineTo(
          startPoint.x - arrowLength * Math.cos(angle + arrowAngle),
          startPoint.y - arrowLength * Math.sin(angle + arrowAngle),
        );
        ctx.stroke();

        // Draw end arrow head (outward)
        ctx.beginPath();
        ctx.moveTo(endPoint.x, endPoint.y);
        ctx.lineTo(
          endPoint.x + arrowLength * Math.cos(angle - arrowAngle),
          endPoint.y + arrowLength * Math.sin(angle - arrowAngle),
        );
        ctx.moveTo(endPoint.x, endPoint.y);
        ctx.lineTo(
          endPoint.x + arrowLength * Math.cos(angle + arrowAngle),
          endPoint.y + arrowLength * Math.sin(angle + arrowAngle),
        );
        ctx.stroke();

        // Draw measurement label
        const midPoint = {
          x: (startPoint.x + endPoint.x) / 2,
          y: (startPoint.y + endPoint.y) / 2,
        };

        ctx.font = `${14 / zoom}px Arial`;
        ctx.fillStyle = "rgba(75, 85, 99, 0.8)";
        ctx.textAlign = "center";
        ctx.textBaseline = "bottom";
        ctx.fillText(`${distanceInCm} cm`, midPoint.x, midPoint.y - 5 / zoom);

        ctx.restore();
      }
    };