// In the animation loop where dragging is handled
if (dragState.isDragging && dragState.selectedObject && dragState.startPosition && 
    dragState.initialMousePosition && dragState.currentMousePosition) {

  // Calculate mouse delta in screen space
  const mouseDeltaX = dragState.currentMousePosition.x - dragState.initialMousePosition.x;
  const mouseDeltaY = dragState.currentMousePosition.y - dragState.initialMousePosition.y;
  
  // Determine drag magnitude - use the larger mouse movement component
  // and preserve its sign for direction
  const dragMagnitude = Math.abs(mouseDeltaX) > Math.abs(mouseDeltaY) ? 
    mouseDeltaX : -mouseDeltaY;  // Note: Y is negated because screen Y increases downward
  
  // Scale factor to convert screen pixels to scene units
  const scaleFactor = 8.0;
  
  // Calculate the displacement in the local axis
  const localDisplacement = dragMagnitude * scaleFactor;
  
  // Start with the original position
  const newPosition = dragState.startPosition.clone();
  
  // Apply movement based on selected axis in LOCAL coordinates,
  // transforming the local displacement to global coordinates
  if (dragState.selectedAxis === "x" && dragState.axisDirectionVectors.x) {
    // X-axis: Apply displacement along local X direction vector
    const localXDir = dragState.axisDirectionVectors.x;
    newPosition.x += localXDir.x * localDisplacement;
    newPosition.y += localXDir.y * localDisplacement;
    newPosition.z += localXDir.z * localDisplacement;
  } 
  else if (dragState.selectedAxis === "y") {
    // Y-axis: Always vertical in world space (along global Z)
    newPosition.z += localDisplacement;
  } 
  else if (dragState.selectedAxis === "z" && dragState.axisDirectionVectors.z) {
    // Z-axis: Apply displacement along local Z direction vector
    const localZDir = dragState.axisDirectionVectors.z;
    newPosition.x += localZDir.x * localDisplacement;
    newPosition.y += localZDir.y * localDisplacement;
    newPosition.z += localZDir.z * localDisplacement;
  }
  
  // Update the object's position
  dragState.selectedObject.position.copy(newPosition);
}