const renderStep1 = () => {
    return (
      <>
        <Card className="mt-4">
          <CardContent className="p-4">
            <ToolbarToggle
              mode={tab}
              onModeChange={(value: "2d-editor" | "3d-preview") => {
                if (value === "3d-preview" && !hasClosedContour) {
                  toast({
                    title: "Invalid Room Layout",
                    description:
                      "Please create a closed room contour before viewing in 3D",
                    variant: "destructive",
                  });
                  return;
                }
                setTab(value);
              }}
              hasClosedContour={hasClosedContour}
            />

            <div className="flex gap-4" style={{ height: `calc(100vh - ${viewportOffset}px)` }}>
              {/* Left side menus */}
              <div className="w-72 space-y-6 overflow-y-auto" style={{ height: `calc(100vh - ${viewportOffset}px)` }}>
                {/* 2D Configuration - only show when in 2D mode */}
                {tab === "2d-editor" && (
                  <div className="border rounded-lg p-4">
                    <h3 className="font-semibold text-xl mb-4 text-center">2D Configuration</h3>
                    
                    {/* Wall Design */}
                    <div className="space-y-4">
                      <h3 className="font-semibold">Wall Design</h3>
                      <div className="flex items-start gap-4">
                        {/* Wall Line Button */}
                        <Button
                          variant={currentTool === "wall" ? "default" : "outline"}
                          className={getWallStyles()}
                          onClick={() => handleToolSelect("wall")}
                        >
                          <div className="w-6 h-6 bg-primary/20 rounded-sm" />
                          <span className="text-xs mt-1">Wall Line</span>
                        </Button>
                        
                        {/* Wall Temperature */}
                        <div className="space-y-2 flex-1">
                          <TooltipProvider>
                            <div className="flex items-center gap-1">
                              <Label htmlFor="default-wall-temp" className="text-sm font-medium">
                                Wall Temperature
                              </Label>
                              <Tooltip>
                                <TooltipTrigger>
                                  <Info className="w-3 h-3 text-gray-400" />
                                </TooltipTrigger>
                                <TooltipContent>
                                  <p className="max-w-64">
                                    Default temperature assigned to new walls when created. 
                                    You can change individual wall temperatures by double-clicking on any wall.
                                  </p>
                                </TooltipContent>
                              </Tooltip>
                            </div>
                          </TooltipProvider>
                          <div className="flex items-center gap-2">
                            <Input
                              id="default-wall-temp"
                              type="number"
                              value={defaultWallTemperature}
                              onChange={(e) => {
                                const value = parseFloat(e.target.value);
                                if (!isNaN(value) && value >= -50 && value <= 100) {
                                  setDefaultWallTemperature(value);
                                }
                              }}
                              className="w-20 h-8"
                              min={-50}
                              max={100}
                              step={0.5}
                              placeholder="20"
                            />
                            <span className="text-sm text-gray-500">°C</span>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="space-y-4 mt-4">
                      <h3 className="font-semibold">Air Entries</h3>
                      <div className="grid grid-cols-3 gap-2">
                        <Button
                          variant="outline"
                          className={getAirEntryStyles("window")}
                          onClick={() => handleAirEntrySelect("window")}
                        >
                          <div className="w-6 h-6 border-2 border-blue-500 grid grid-cols-2" />
                          <span className="text-xs mt-1">Window</span>
                        </Button>
                        <Button
                          variant="outline"
                          className={getAirEntryStyles("door")}
                          onClick={() => handleAirEntrySelect("door")}
                        >
                          <div className="w-6 h-6 border-2 border-amber-500" />
                          <span className="text-xs mt-1">Door</span>
                        </Button>
                        <Button
                          variant="outline"
                          className={getAirEntryStyles("vent")}
                          onClick={() => handleAirEntrySelect("vent")}
                        >
                          <div className="w-6 h-6 border-2 border-green-500 grid grid-cols-2 grid-rows-2" />
                          <span className="text-xs mt-1">Vent-Grid</span>
                        </Button>
                      </div>
                    </div>

                    {/* Stair Design - Moved from Parameters */}
                    {isMultifloor && (
                      <div className="space-y-4 mt-4">
                        <h3 className="font-semibold">Stair Design</h3>
                        <div className="flex items-start gap-4">
                          {/* Stair Design Button */}
                          <Button
                            variant="outline"
                            className={getStairStyles()}
                            onClick={() => {
                              handleToolSelect("stairs");
                              if (currentTool !== "stairs") {
                                setTab("2d-editor");
                                toast({
                                  title: "Stair Design Tool Activated",
                                  description:
                                    "Click on the canvas to place points and create a stair polygon. Close the shape by clicking near the first point.",
                                });
                              }
                            }}
                          >
                            <FileEdit className="w-6 h-6" />
                            <span className="text-xs mt-1">Stair Design</span>
                          </Button>
                          
                          {/* Stair Temperature */}
                          <div className="space-y-2 flex-1">
                            <TooltipProvider>
                              <div className="flex items-center gap-1">
                                <Label htmlFor="default-stair-temp" className="text-sm font-medium">
                                  Stair Temperature
                                </Label>
                                <Tooltip>
                                  <TooltipTrigger>
                                    <Info className="w-3 h-3 text-gray-400" />
                                  </TooltipTrigger>
                                  <TooltipContent>
                                    <p className="max-w-64">
                                      Default temperature assigned to new stairs when created. 
                                      You can change individual stair temperatures by double-clicking on any stair.
                                    </p>
                                  </TooltipContent>
                                </Tooltip>
                              </div>
                            </TooltipProvider>
                            <div className="flex items-center gap-2">
                              <Input
                                id="default-stair-temp"
                                type="number"
                                value={defaultStairTemperature}
                                onChange={(e) => {
                                  const value = parseFloat(e.target.value);
                                  if (!isNaN(value) && value >= -50 && value <= 100) {
                                    setDefaultStairTemperature(value);
                                  }
                                }}
                                className="w-20 h-8"
                                min={-50}
                                max={100}
                                step={0.5}
                                placeholder="20"
                              />
                              <span className="text-sm text-gray-500">°C</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}

                    {/* 2D Tools Section */}
                    <div className="space-y-4 mt-4">
                      <h3 className="font-semibold">2D Tools</h3>
                      <div className="flex gap-4 justify-center">
                        <Button
                          variant={currentTool === "eraser" ? "default" : "outline"}
                          className="w-20 h-16 flex flex-col items-center justify-center gap-1"
                          onClick={() => handleToolSelect("eraser")}
                        >
                          <Eraser className="w-6 h-6" />
                          <span className="text-xs">Eraser</span>
                        </Button>
                        <Button
                          variant={currentTool === "measure" ? "default" : "outline"}
                          className="w-20 h-16 flex flex-col items-center justify-center gap-1"
                          onClick={() => handleToolSelect("measure")}
                        >
                          <Ruler className="w-6 h-6" />
                          <span className="text-xs">Measure</span>
                        </Button>
                      </div>
                    </div>

                    {/* Floor Management - Parameters content moved here */}
                    <div className="space-y-4 mt-4 pt-4 border-t">
                      <div className="flex items-center justify-between">
                        <h3 className="font-semibold">Floor Management</h3>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => setIsFloorManagementExpanded(!isFloorManagementExpanded)}
                          className="h-8 w-8 p-0"
                        >
                          <ChevronDown className={cn("h-4 w-4 transition-transform", 
                            !isFloorManagementExpanded && "rotate-180")} />
                        </Button>
                      </div>
                      {isFloorManagementExpanded && (
                        <div className="space-y-4">
                          {isMultifloor && (
                            <div className={cn(
                              "space-y-4 pt-2",
                              tab !== "2d-editor" && "opacity-50 pointer-events-none"
                            )}>
                              <div className="space-y-2">
                                <Label>Current Floor</Label>
                                <Select 
                                  value={currentFloor} 
                                  onValueChange={tab === "2d-editor" ? handleFloorChange : undefined}
                                  disabled={tab !== "2d-editor"}
                                >
                                  <SelectTrigger 
                                    className={cn(
                                      tab !== "2d-editor" && "cursor-not-allowed"
                                    )}
                                    title={tab !== "2d-editor" ? "Floor management available only in 2D Editor" : undefined}
                                  >
                                    <SelectValue placeholder="Select floor" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="ground">
                                      {formatFloorText("ground")}
                                    </SelectItem>
                                    {floors.ground.hasClosedContour && (
                                      <>
                                        <SelectItem value="first">
                                          {formatFloorText("first")}
                                        </SelectItem>
                                        {floors.first?.hasClosedContour && (
                                          <SelectItem value="second">
                                            {formatFloorText("second")}
                                          </SelectItem>
                                        )}
                                        {floors.second?.hasClosedContour && (
                                          <SelectItem value="third">
                                            {formatFloorText("third")}
                                          </SelectItem>
                                        )}
                                        {floors.third?.hasClosedContour && (
                                          <SelectItem value="fourth">
                                            {formatFloorText("fourth")}
                                          </SelectItem>
                                        )}
                                        {floors.fourth?.hasClosedContour && (
                                          <SelectItem value="fifth">
                                            {formatFloorText("fifth")}
                                          </SelectItem>
                                        )}
                                      </>
                                    )}
                                  </SelectContent>
                                </Select>
                                {tab !== "2d-editor" && (
                                  <p className="text-xs text-muted-foreground">
                                    Switch to 2D Editor to manage floors
                                  </p>
                                )}
                              </div>

                              <div className="space-y-2">
                                <Label>Load from Floor</Label>
                                <div className="flex gap-2">
                                  <Select 
                                    value={loadFromFloor} 
                                    onValueChange={tab === "2d-editor" ? setLoadFromFloor : undefined}
                                    disabled={tab !== "2d-editor"}
                                  >
                                    <SelectTrigger 
                                      className={cn(
                                        "flex-1",
                                        tab !== "2d-editor" && "cursor-not-allowed"
                                      )}
                                      title={tab !== "2d-editor" ? "Floor management available only in 2D Editor" : undefined}
                                    >
                                      <SelectValue placeholder="Select floor to load from" />
                                    </SelectTrigger>
                                    <SelectContent>
                                      {(() => {
                                        // Define floor hierarchy order
                                        const floorOrder = ["ground", "first", "second", "third", "fourth", "fifth"];
                                        const currentFloorIndex = floorOrder.indexOf(currentFloor);
                                        
                                        // Filter to only show floors that are "below" current floor
                                        return Object.entries(floors)
                                          .filter(([floorName]) => {
                                            const floorIndex = floorOrder.indexOf(floorName);
                                            // Only include floors that are lower in hierarchy and exist
                                            return floorIndex !== -1 && floorIndex < currentFloorIndex;
                                          })
                                          .map(([floorName, floor]) => (
                                            <SelectItem key={floorName} value={floorName}>
                                              {formatFloorText(floorName)}
                                            </SelectItem>
                                          ));
                                      })()}
                                    </SelectContent>
                                  </Select>
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={tab === "2d-editor" ? handleLoadTemplate : () => {
                                      toast({
                                        title: "Feature Unavailable",
                                        description: "Floor management is available only in 2D Editor",
                                        variant: "destructive",
                                      });
                                    }}
                                    disabled={tab !== "2d-editor"}
                                    className={cn(
                                      tab !== "2d-editor" && "cursor-not-allowed"
                                    )}
                                    title={tab !== "2d-editor" ? "Floor management available only in 2D Editor" : undefined}
                                  >
                                    Load
                                  </Button>
                                </div>
                                {tab !== "2d-editor" && (
                                  <p className="text-xs text-muted-foreground">
                                    Switch to 2D Editor to load floor templates
                                  </p>
                                )}
                              </div>
                            </div>
                          )}

                          {/* Ceiling Height y Floor Deck Parameters */}
                          <div className={cn(
                            "space-y-4 pt-4 border-t",
                            tab !== "2d-editor" && "opacity-50 pointer-events-none"
                          )}>
                            <div className="flex items-center gap-2">
                              <h4 className="font-medium text-sm text-gray-700">Building Parameters</h4>
                              {tab !== "2d-editor" && (
                                <span className="text-xs text-muted-foreground">(Available in 2D Editor)</span>
                              )}
                            </div>
                            
                            {!isMultifloor ? (
                              // Modo single floor: solo control de ceiling height
                              <div className="space-y-4">
                                <div className="space-y-2">
                                  <Label htmlFor="ceiling-height">Ceiling Height</Label>
                                  <div className="flex items-center gap-2">
                                    <Input
                                      id="ceiling-height"
                                      type="number"
                                      value={ceilingHeight}
                                      min={200}
                                      max={500}
                                      step={10}
                                      onChange={(e) => {
                                        const value = parseInt(e.target.value);
                                        if (!isNaN(value) && value >= 200 && value <= 500) {
                                          setCeilingHeight(value);
                                        }
                                      }}
                                      className="w-24"
                                    />
                                    <span className="text-sm text-gray-500">cm</span>
                                  </div>
                                </div>
                              </div>
                            ) : (
                              // Modo multifloor: controles por planta
                              <div className="space-y-4">
                                {Object.keys(floors).filter(floorName => floors[floorName]?.hasClosedContour).map((floorName) => {
                                  const floorParams = floorParameters[floorName] || { ceilingHeight: 220, floorDeck: 35, ceilingTemperature: 20, floorTemperature: 20 };
                                  const isCurrentFloor = floorName === currentFloor;
                                  
                                  return (
                                    <div 
                                      key={floorName} 
                                      className={cn(
                                        "p-3 rounded-lg border transition-all duration-200",
                                        isCurrentFloor 
                                          ? "bg-blue-50 border-blue-200 ring-2 ring-blue-200" 
                                          : "bg-gray-50 border-gray-200 hover:bg-gray-100 hover:border-gray-300",
                                        tab === "2d-editor" && !isCurrentFloor && "cursor-pointer",
                                        tab !== "2d-editor" && "cursor-not-allowed"
                                      )}
                                      onClick={
                                        tab === "2d-editor" && !isCurrentFloor
                                          ? () => handleFloorChange(floorName)
                                          : tab !== "2d-editor"
                                          ? () => {
                                              toast({
                                                title: "Feature Unavailable",
                                                description: "Floor navigation is available only in 2D Editor",
                                                variant: "destructive",
                                              });
                                            }
                                          : undefined
                                      }
                                      title={
                                        tab !== "2d-editor" 
                                          ? "Floor navigation available only in 2D Editor"
                                          : !isCurrentFloor 
                                          ? `Click to switch to ${formatFloorText(floorName)}`
                                          : `Currently viewing ${formatFloorText(floorName)}`
                                      }
                                    >
                                      <h5 className="font-medium text-sm mb-3 flex items-center gap-2">
                                        {formatFloorText(floorName)}
                                        {isCurrentFloor && <span className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded">Current</span>}
                                        {tab === "2d-editor" && !isCurrentFloor && (
                                          <span className="text-xs text-gray-500 ml-auto">Click to switch</span>
                                        )}
                                      </h5>
                                      <div className="grid grid-cols-2 gap-3">
                                        <div className="space-y-1">
                                          <Label className="text-xs">Ceiling Height</Label>
                                          <div className="flex items-center gap-1">
                                            <Input
                                              type="number"
                                              value={floorParams.ceilingHeight}
                                              min={200}
                                              max={500}
                                              step={10}
                                              onChange={(e) => {
                                                const value = parseInt(e.target.value);
                                                if (!isNaN(value) && value >= 200 && value <= 500) {
                                                  updateFloorParameter(floorName, 'ceilingHeight', value);
                                                }
                                              }}
                                              className="w-16 h-8 text-xs"
                                            />
                                            <span className="text-xs text-gray-500">cm</span>
                                          </div>
                                        </div>
                                        <div className="space-y-1">
                                          <Label className="text-xs">Floor Deck</Label>
                                          <div className="flex items-center gap-1">
                                            <Input
                                              type="number"
                                              value={floorParams.floorDeck}
                                              min={5}
                                              max={150}
                                              step={5}
                                              onChange={(e) => {
                                                const value = parseInt(e.target.value);
                                                if (!isNaN(value) && value >= 5 && value <= 150) {
                                                  updateFloorParameter(floorName, 'floorDeck', value);
                                                }
                                              }}
                                              className="w-16 h-8 text-xs"
                                            />
                                            <span className="text-xs text-gray-500">cm</span>
                                          </div>
                                        </div>
                                        <div className="space-y-1">
                                          <Label className="text-xs">Ceiling Temperature</Label>
                                          <div className="flex items-center gap-1">
                                            <Input
                                              type="number"
                                              value={floorParams.ceilingTemperature || 20}
                                              min={-50}
                                              max={100}
                                              step={0.1}
                                              onChange={(e) => {
                                                const value = parseFloat(e.target.value);
                                                if (!isNaN(value) && value >= -50 && value <= 100) {
                                                  updateFloorParameter(floorName, 'ceilingTemperature', value);
                                                }
                                              }}
                                              className="w-16 h-8 text-xs"
                                            />
                                            <span className="text-xs text-gray-500">°C</span>
                                          </div>
                                        </div>
                                        <div className="space-y-1">
                                          <Label className="text-xs">Floor Temperature</Label>
                                          <div className="flex items-center gap-1">
                                            <Input
                                              type="number"
                                              value={floorParams.floorTemperature || 20}
                                              min={-50}
                                              max={100}
                                              step={0.1}
                                              onChange={(e) => {
                                                const value = parseFloat(e.target.value);
                                                if (!isNaN(value) && value >= -50 && value <= 100) {
                                                  updateFloorParameter(floorName, 'floorTemperature', value);
                                                }
                                              }}
                                              className="w-16 h-8 text-xs"
                                            />
                                            <span className="text-xs text-gray-500">°C</span>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  );
                                })}
                              </div>
                            )}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                )}

                {/* 3D Configuration - only show when in 3D mode */}
                {tab === "3d-preview" && (
                  <div className="border rounded-lg p-4">
                    <h3 className="font-semibold text-xl mb-4 text-center">3D Configuration</h3>
                    <div className="space-y-4">
                      <div className="grid grid-cols-3 gap-2">
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button
                              variant="outline"
                              className="w-full h-16 flex flex-col items-center justify-center gap-1"
                            >
                              <Eye className="w-6 h-6" />
                              <span className="text-xs flex items-center">
                                View <ChevronDown className="h-3 w-3 ml-1" />
                              </span>
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="start">
                            <DropdownMenuItem
                              onClick={() => changeViewDirection("+X")}
                            >
                              +X View
                            </DropdownMenuItem>
                            <DropdownMenuItem
                              onClick={() => changeViewDirection("-X")}
                            >
                              -X View
                            </DropdownMenuItem>
                            <DropdownMenuItem
                              onClick={() => changeViewDirection("+Y")}
                            >
                              +Y View
                            </DropdownMenuItem>
                            <DropdownMenuItem
                              onClick={() => changeViewDirection("-Y")}
                            >
                              -Y View
                            </DropdownMenuItem>
                            <DropdownMenuItem
                              onClick={() => changeViewDirection("+Z")}
                            >
                              +Z View (Top)
                            </DropdownMenuItem>
                            <DropdownMenuItem
                              onClick={() => changeViewDirection("-Z")}
                            >
                              -Z View (Bottom)
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                        <Button
                          variant={isEraserMode ? "default" : "outline"}
                          className="w-full h-16 flex flex-col items-center justify-center gap-1"
                          onClick={handleToggleEraserMode}
                        >
                          <Eraser className="w-6 h-6" />
                          <span className="text-xs">Eraser</span>
                        </Button>
                        <Button
                          variant={isMeasureMode ? "default" : "outline"}
                          className="w-full h-16 flex flex-col items-center justify-center gap-1"
                          onClick={handleToggleMeasureMode}
                        >
                          <Ruler className="w-6 h-6" />
                          <span className="text-xs">Measure</span>
                        </Button>
                      </div>

                      <div className="space-y-4">
                        <h3 className="font-semibold">Wall Transparency</h3>
                        <div className="px-2">
                          <Slider
                            defaultValue={[20]}
                            max={100}
                            step={1}
                            onValueChange={(value: number[]) =>
                              setWallTransparency(value[0] / 100)
                            }
                          />
                          <div className="text-sm text-right mt-1">
                            {Math.round(wallTransparency * 100)}%
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {renderFilesMenu()}
              </div>

              {/* Right side - Canvas */}
              {renderCanvasSection("tabs")}
            </div>
          </CardContent>
        </Card>
        
        <AirEntryDialog
          type={currentAirEntry || "window"}
          isOpen={isAirEntryDialogOpen}
          onClose={() => {
            setIsAirEntryDialogOpen(false);
            setSelectedLine(null);
          }}
          onConfirm={handleAirEntryDimensionsConfirm}
        />
      </>
    );
  };