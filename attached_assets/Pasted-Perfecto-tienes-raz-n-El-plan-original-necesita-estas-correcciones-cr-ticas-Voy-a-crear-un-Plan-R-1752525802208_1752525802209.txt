Perfecto, tienes razón. El plan original necesita estas correcciones críticas. Voy a crear un Plan Revisado incorporando todas las mejoras que propones:

Plan Revisado: Arquitectura de Sincronización Bidireccional
FASE 1: Restructuración del Store Central + Migración (60-75 min)
1.1 Data Migration & Validation (Nuevo)
Objetivo: Migrar datos existentes sin perder información
Implementación:
migrateExistingData() {
  // Backup de datos actuales
  // Validar IDs existentes antes de regenerar
  // Rollback strategy si falla
  // Preservar referencias internas
}
1.2 Sistema de ID Único Robusto (Mejorado)
Validación de IDs legacy antes de regenerar
Backup de datos antes de cualquier cambio
Rollback automático si detecta problemas
1.3 CRUD Operations Atómicas (Extendido)
Añadir validación de datos en cada operación
Error handling para corrupted state
Logging para debugging
FASE 2: Canvas3D Simplificación + Preview System (45-60 min)
2.1 Eliminación de Estado Local ✓
2.2 Event-Only Architecture ✓
2.3 Real-Time Preview System (Nuevo)
Objetivo: Preview visual sin afectar store permanentemente
Implementación:
handleRealTimePreview(entryId, tempChanges) {
  // Solo mesh update visual
  // previewState separado del store
  // Commit preview to store solo en onSave
  // Cancel preview restoration
}
FASE 2.5: Backward Compatibility (20 min - Nuevo)
2.5.1 Legacy Interface Support
Mantener interfaces legacy temporalmente
Wrapper functions para smooth transition
Feature flags para rollback rápido
2.5.2 Transition Strategy
Test con datos existentes
Validación de funcionalidad actual
FASE 3: Canvas2D Event System (30-45 min) ✓
FASE 4: Unified Dialog System + Validación (60-75 min)
4.1 Single Dialog Component ✓
4.2 Real-Time Store Updates ✓
4.3 Data Validation & Error Handling (Nuevo)
Validar entryId exists antes de abrir dialog
Handle missing floors/entries gracefully
Error boundaries para corrupted state
User feedback para errores
4.4 Dialog State Management (Mejorado)
Prevention de multiple dialogs simultáneos
State persistence durante tab switching
FASE 5: Parent Orchestration (30 min) ✓
FASE 6: Floor Copy Independence (Corregido) (45 min)
6.1 Deep Copy with Complete Regeneration (Mejorado)
❌ PROBLEMA IDENTIFICADO: No solo regenerar IDs
✅ SOLUCIÓN COMPLETA:
copyFloor(sourceFloorName, targetFloorName) {
  // Regenerar IDs únicos
  // Actualizar referencias internas (line.id)
  // Recalcular posiciones si hay conflictos
  // Validar que copied floor no sobrescriba existing
  // Handle name conflicts (floor1, floor1_copy, etc.)
  // Validar integridad de datos copiados
}
FASE 7: Testing & Validation (Extendido) (60-75 min)
7.1 Functionality Testing ✓
7.2 Performance Testing ✓
7.3 Cross-Component Integration (Nuevo)
Crear en 2D → editar en 3D → volver a 2D
Tab switching durante edición
Store updates durante dialog abierto
Performance con múltiples floors/entries
7.4 Edge Cases Testing (Nuevo)
IDs duplicados legacy
Missing entries in store
Corrupted floor data
Network interruption scenarios
FASE 7.5: Integration Testing (30 min - Nuevo)
7.5.1 End-to-End Scenarios
Complete workflow testing
Multi-user simulation
Data persistence validation
7.5.2 Performance Benchmarks
Memory usage monitoring
Render performance metrics
Store update efficiency
FASE 8: Cleanup & Documentation (15-30 min) ✓
Success Metrics Completados:
Funcionalidad Core:
✅ IDs únicos y persistentes
✅ Sincronización bidireccional Canvas2D ↔ Canvas3D
✅ Mismo dialog para ambas vistas
✅ Real-time updates sin lag
✅ Floor copy independence
✅ No infinite loops o memory leaks
✅ Performance optimizada
Robustez (Nuevos):
✅ Backward compatibility maintained
✅ Data migration sin pérdidas
✅ Error handling robusto
✅ Edge cases cubiertos
✅ Preview system funcional
✅ Integration testing passed
✅ Performance benchmarks met
Estrategia de Rollback:
Emergency Rollback Plan:
1. Feature flags para disable new system
2. Backup de código legacy en branch separado  
3. Data backup antes de migration
4. Quick revert process documentado